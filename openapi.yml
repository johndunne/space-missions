openapi: 3.1.0
x-stoplight:
  id: zy16u8j59mtxg
info:
  title: Space Missions
  version: '1.0'
  summary: 'A simple REST API into historic, present and future space missions. That''s humanity exploring the solar system and beyond.'
  description: 'A simple REST API into historic, present and future space missions. That''s humanity exploring the solar system and beyond.'
  contact:
    name: John Dunne
    email: john@alldunne.org
servers:
  - url: 'https://spacemissions.alldunne.com'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
  '/mission/{missionId}':
    parameters:
      - schema:
          type: string
        name: missionId
        in: path
        required: true
    get:
      summary: Get Mission Info by mission ID
      tags: []
      responses:
        '200':
          description: Mission Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mission'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-mission-missionId
      description: Retrieve the information of the mission with the matching mission ID.
    patch:
      summary: Update Mission Information
      operationId: patch-mission-missionId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Mission'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: Mission Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing mission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                launch:
                  type: integer
                  format: int64
                starts:
                  type: integer
                  format: int64
                ends:
                  type: integer
                  format: int64
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
    delete:
      summary: ''
      operationId: delete-mission-missionId
      responses:
        '200':
          description: OK
      description: Delete a mission with the matching missionId.
  '/operator/{operatorId}':
    parameters:
      - schema:
          type: string
        name: operatorId
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionOperator'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-operator-operatorId
      description: Retrieve the information of the mission operator with the matching mission operator ID.
    patch:
      summary: Update Operator Information
      operationId: patch-operator-operatorId
      responses:
        '200':
          description: Operator Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissionOperator'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: Operator Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing operator.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
    delete:
      summary: ''
      operationId: delete-operator-operatorId
      responses:
        '200':
          description: OK
      description: Delete a mission with the matching missionId.
  '/observatory/{observatoryId}':
    parameters:
      - schema:
          type: string
        name: observatoryId
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Observatory'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-observatory-observatoryId
      description: Retrieve the information of the mission with the matching mission ID.
    patch:
      summary: Update User Information
      operationId: patch-observatory-observatoryId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing observatory.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                platformType:
                  type: string
                  description: 'The platform type; telescope, observatory, satelite.'
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
    delete:
      summary: ''
      operationId: delete-observatory-observatoryId
      responses:
        '200':
          description: OK
      description: Delete a mission with the matching missionId.
  '/subject/{subjectId}':
    parameters:
      - schema:
          type: string
        name: subjectId
        in: path
        required: true
    get:
      summary: Get User Info by User ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-subject-subjectId
      description: Retrieve the information of the mission with the matching mission ID.
    patch:
      summary: Update User Information
      operationId: patch-subject-subjectId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
    delete:
      summary: ''
      operationId: delete-subject-subjectId
      responses:
        '200':
          description: OK
      description: Delete a mission with the matching missionId.
  '/instrument/{instrumentId}':
    parameters:
      - schema:
          type: string
        name: instrumentId
        in: path
        required: true
    get:
      summary: Get Instrument Info by instrument ID
      tags: []
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-instrument-instrumentId
      description: Retrieve the information of the mission with the matching mission ID.
    patch:
      summary: Update instrument Information
      operationId: patch-instrument-instrumentId
      responses:
        '200':
          description: Instrument Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Instrument'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: Instrument Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                instrumentId:
                  type: integer
                name:
                  type: string
                mission:
                  type: string
                description:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
    delete:
      summary: Delete instrument
      operationId: delete-instrument-instrumentId
      responses:
        '200':
          description: OK
      description: Delete a mission with the matching missionId.
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
  /mission:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-mission
      parameters:
        - schema:
            type: string
          in: query
          description: Query missions by name
          name: name
        - schema:
            type: string
          in: query
          name: description
          description: Query missions by descriptions
      description: Query missions.
    post:
      summary: ''
      operationId: post-mission
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                launch:
                  type: integer
                  format: int64
                starts:
                  type: integer
                  format: int64
                ends:
                  type: integer
                  format: int64
              required:
                - name
                - launch
                - description
                - starts
                - ends
        description: Post the necessary fields for the API to create a new user.
      description: Create a mission
  /operator:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-operator
      description: Get the operator with matching operator ID.
    post:
      summary: ''
      operationId: post-operator
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                launch:
                  type: integer
                  format: int64
                starts:
                  type: integer
                  format: int64
                ends:
                  type: integer
                  format: int64
              required:
                - name
                - launch
                - description
                - starts
                - ends
        description: Post the necessary fields for the API to create a new user.
      description: Create a mission
    parameters: []
  /observatory:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-observatory
    post:
      summary: ''
      operationId: post-observatory
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                platformType:
                  type: string
                  description: 'The platform type; telescope, observatory, satelite.'
              required:
                - name
                - description
                - platformType
        description: Post the necessary fields for the API to create a new user.
      description: Create a mission
    parameters: []
  /subject:
    get:
      summary: Your GET endpoint
      tags: []
      responses: {}
      operationId: get-subject
    post:
      summary: ''
      operationId: post-subject
      responses:
        '200':
          description: OK
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                location:
                  type: string
              required:
                - name
                - description
                - location
        description: Post the necessary fields for the API to create a new user.
      description: Create a mission
    parameters: []
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    MissionOperator:
      title: MissionOperator
      x-stoplight:
        id: 5z1d2ua7czo14
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
    Mission:
      title: Mission
      x-stoplight:
        id: h736u1786h28u
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        launch:
          type: integer
          format: int64
        starts:
          type: integer
          format: int64
        ends:
          type: integer
          format: int64
    Observatory:
      title: Observatory
      x-stoplight:
        id: de5ff8f78e116
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        platformType:
          type: string
          description: 'The platform type; telescope, observatory, satelite.'
    Subject:
      title: Subject
      x-stoplight:
        id: opg0mg4mjp9f6
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        location:
          type: string
    AccessEvent:
      title: AccessEvent
      x-stoplight:
        id: dra3sasdem865
      type: object
      properties:
        id:
          type: integer
        when:
          type: integer
          format: int64
        apiKeyId:
          type: integer
          format: int64
        target:
          type: string
    Country:
      title: Country
      x-stoplight:
        id: 8gr8cs67bqtu0
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ApiKey:
      title: ApiKey
      x-stoplight:
        id: q946tt64a8puc
      type: object
      properties:
        id:
          type: string
        key:
          type: string
        ownerId:
          type: integer
        level:
          type: string
    Instrument:
      title: Instrument
      x-stoplight:
        id: rsk5n4c4jq92y
      type: object
      description: 'A science instrument installed on an observatory. '
      properties:
        id:
          type: integer
        observatoryId:
          type: integer
        name:
          type: string
        mission:
          type: string
        description:
          type: string
  requestBodies:
    SearchMission:
      content:
        application/json:
          schema:
            type: object
            properties:
              mission:
                $ref: '#/components/schemas/Mission'
              '':
                type: string
  responses:
    ObservatoryResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              observatory:
                $ref: '#/components/schemas/Observatory'
    MissionResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              observatory:
                $ref: '#/components/schemas/Mission'
    MissionOperatorResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              observatory:
                $ref: '#/components/schemas/MissionOperator'
    InstrumentResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              observatory:
                $ref: '#/components/schemas/Instrument'
    SubjectResponse:
      description: Example response
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: integer
              observatory:
                $ref: '#/components/schemas/Subject'
